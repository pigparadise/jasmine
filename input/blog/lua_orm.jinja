<p>
  最近lua更新到了lua5.3.0, 云大侠决定升级skynet中的lua版本, 而我们项目目前用的orm模块有一点语法方面的不兼容.虽然暂时用不上，但是出于兴趣试着做了一个orm模块,我对它的要求大概有这几点:
</p>


<p>1. 可以自定义类型，支持基本的数据结构如int,string, 可以设置一些简单的检查规则如最大最小值等; 支持自定义类型的引用，但不支持循环引用</p>
<p>2. 足够轻量，只是普通的lua table在修改和创建属性时会检查下数据是否符合定义</p>


<p>
  第1点比较容易想到，设计一个类型的数据结构即可。<br>
  目前项目用的orm模块可以比较方便地像编程语言那样定义数据结构, 然后通过一个语法解析器翻译成一颗语法树。我暂时没去实现这部分，主要是觉得这部分只是一个交互性好点的外壳，是完全可以独立出来的。个人比较喜欢<a target="_blank" href="http://json-schema.org/">JSON Schema</a>的表达方式，于是类似它, 直接用了lua table定义类型的规则。
</p>

<p>
  为实现第2点，创建函数一定有会个, 属性赋值时需要重载相关元方法。经过一些尝试, 好消息是lua5.3.0中table.insert开始也会触发元方法__newindex, 坏消息是lua table属性赋值触发的元方法并没有包含所有情况。__newindex只会在table目前没有的属性赋值时触发，对一个已经存在的属性进行赋值，是监控的。目前项目orm的做法是在orm obj中放一个data属性，数据其实存在这个data中, 因为每次赋值orm obj都没有属性(一些特殊属性除外)，所以基本都会触发__newindex。
</p>

<p>
  试着定义了个setfield的外部方法，如果一直调用这个方法修改属性也行, 比如setfield(orm_obj, "attr_name", data), 但是一看就知道很难用... 后面在想，既然只是lua缺少一个我需要的元方法, 为什么不干脆给lua加一个呢? 毕竟目前项目用到的lua已经是改造过的，于是看了看lua5.3.0源码中__newindex的实现，发现只涉及3个文件中的少量代码, 照样子加了个__oldindex, 顾名思义，它和__newindex正好相反. 在上层只要把两个元方法都重载就可以监控所有属性赋值操作了.<br>
</p>

<p>
  解决完上面两个主要问题后，其他的主要是体力活了，目前实现了一个基本原型。
  <a target="_blank" href="https://github.com/pigparadise/cookies/tree/master/lua_orm">代码传送门</a>
</p>
